<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.6"/>
<title>libaika: timer.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">libaika
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.6 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('timer_8hpp_source.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">timer.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="timer_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/* The MIT License:</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">Copyright (c) 2008-2012 Ivan Gagis &lt;igagis@gmail.com&gt;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">in the Software without restriction, including without limitation the rights</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">The above copyright notice and this permission notice shall be included in</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">all copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">THE SOFTWARE. */</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">// Home page: http://ting.googlecode.com</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">//#define M_ENABLE_TIMER_TRACE</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#ifdef M_ENABLE_TIMER_TRACE</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#       define M_TIMER_TRACE(x) TRACE(&lt;&lt; &quot;[Timer]&quot; x)</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#else</span></div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="timer_8hpp.htm#a704867c8cabdfaa73868416840ef9af9">   40</a></span>&#160;<span class="preprocessor"></span><span class="preprocessor">#       define M_TIMER_TRACE(x)</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &quot;config.hpp&quot;</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#if M_COMPILER == M_COMPILER_MSVC</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#       pragma warning(disable:4290) //WARNING: C++ exception specification ignored except to indicate a function is not __declspec(nothrow)</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">#if M_OS == M_OS_WINDOWS</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#       include &quot;windows.hpp&quot;</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">#elif M_OS == M_OS_MACOSX</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#       include&lt;sys/time.h&gt;</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor">#elif M_OS == M_OS_LINUX</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;ctime&gt;</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#       error &quot;Unknown OS&quot;</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">#include &quot;debug.hpp&quot;</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">#include &quot;types.hpp&quot;</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">#include &quot;Singleton.hpp&quot;</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">#include &quot;math.hpp&quot;</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">#include &quot;mt/Thread.hpp&quot;</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">#include &quot;mt/Semaphore.hpp&quot;</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div>
<div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="namespaceting.htm">   80</a></span>&#160;<span class="keyword">namespace </span>ting{</div>
<div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="namespaceting_1_1timer.htm">   81</a></span>&#160;<span class="keyword">namespace </span>timer{</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div>
<div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="namespaceting_1_1timer.htm#abc07f3242532902f2617639685cf8f70">   89</a></span>&#160;<span class="keyword">inline</span> std::uint32_t <a class="code" href="namespaceting_1_1timer.htm#abc07f3242532902f2617639685cf8f70">GetTicks</a>(){</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="preprocessor">#if M_OS == M_OS_WINDOWS</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="preprocessor"></span>        <span class="keyword">static</span> LARGE_INTEGER perfCounterFreq = {{0, 0}};</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">if</span>(perfCounterFreq.QuadPart == 0){</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="keywordflow">if</span>(QueryPerformanceFrequency(&amp;perfCounterFreq) == FALSE){</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                        <span class="comment">//looks like the system does not support high resolution tick counter</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                        <span class="keywordflow">return</span> GetTickCount();</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                }</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        LARGE_INTEGER ticks;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordflow">if</span>(QueryPerformanceCounter(&amp;ticks) == FALSE){</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                <span class="keywordflow">return</span> GetTickCount();</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">return</span> std::uint32_t((ticks.QuadPart * 1000) / perfCounterFreq.QuadPart);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="preprocessor">#elif M_OS == M_OS_MACOSX</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="preprocessor"></span>        <span class="comment">//Mac os X doesn&#39;t support clock_gettime</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        timeval t;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        gettimeofday(&amp;t, 0);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keywordflow">return</span> std::uint32_t(t.tv_sec * 1000 + (t.tv_usec / 1000));</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="preprocessor">#elif M_OS == M_OS_LINUX</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="preprocessor"></span>        timespec ts;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">if</span>(clock_gettime(CLOCK_MONOTONIC, &amp;ts) == -1){</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                <span class="keywordflow">throw</span> ting::Exc(<span class="stringliteral">&quot;GetTicks(): clock_gettime() returned error&quot;</span>);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">return</span> std::uint32_t(std::uint32_t(ts.tv_sec) * 1000 + std::uint32_t(ts.tv_nsec / 1000000));</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#       error &quot;Unsupported OS&quot;</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div>
<div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="classting_1_1timer_1_1Timer.htm">  130</a></span>&#160;<span class="keyword">class </span><a class="code" href="classting_1_1timer_1_1Timer.htm">Timer</a>{</div>
<div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="classting_1_1timer_1_1Timer.htm#ac37c02a1444b52b304ace79dfed3de12">  131</a></span>&#160;        <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1timer_1_1Lib.htm">Lib</a>;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="comment">//This constant is for testing purposes.</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="comment">//Should be set to std::uint32_t(-1) in release.</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keyword">inline</span> <span class="keyword">static</span> std::uint32_t DMaxTicks(){</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                <span class="keywordflow">return</span> std::uint32_t(-1);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        }</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordtype">bool</span> isRunning = <span class="keyword">false</span>;<span class="comment">//true if timer has been started and has not stopped yet</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keyword">typedef</span> std::multimap&lt;std::uint64_t, Timer*&gt; T_TimerList;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keyword">typedef</span> T_TimerList::iterator T_TimerIter;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        T_TimerIter i;<span class="comment">//if timer is running, this is the iterator into the map of timers</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1timer_1_1Timer.htm#a2cfdc66a49cdbae175d40ac73cc90c72">OnExpired</a>()noexcept = 0;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div>
<div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="classting_1_1timer_1_1Timer.htm#aff28d7238c56eb67609bf590a8e2a892">  171</a></span>&#160;        inline <a class="code" href="classting_1_1timer_1_1Timer.htm">Timer</a>(){</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                ASSERT(!this-&gt;isRunning)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keyword">virtual</span> <a class="code" href="classting_1_1timer_1_1Timer.htm#a516b83232f040dbe8673c8a062d49fd6">~Timer</a>()noexcept;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        inline <span class="keywordtype">void</span> <a class="code" href="classting_1_1timer_1_1Timer.htm#a88a6d3e10ca5a91594c90e40f8938b83">Start</a>(std::uint32_t millisec);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        inline <span class="keywordtype">bool</span> <a class="code" href="classting_1_1timer_1_1Timer.htm#a6524a204a180e86999421c5882ba0e54">Stop</a>()noexcept;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;};</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00215"></a><span class="lineno"><a class="line" href="classting_1_1timer_1_1Lib.htm">  215</a></span>&#160;class <a class="code" href="classting_1_1timer_1_1Lib.htm">Lib</a> : public IntrusiveSingleton&lt;<a class="code" href="classting_1_1timer_1_1Lib.htm">Lib</a>&gt;{</div>
<div class="line"><a name="l00216"></a><span class="lineno"><a class="line" href="classting_1_1timer_1_1Lib.htm#a493379ef0d408ce7a0b639619e919ee7">  216</a></span>&#160;        <span class="keyword">friend</span> <span class="keyword">class </span>IntrusiveSingleton&lt;Lib&gt;;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keyword">static</span> IntrusiveSingleton&lt;Lib&gt;::T_Instance instance;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        </div>
<div class="line"><a name="l00219"></a><span class="lineno"><a class="line" href="classting_1_1timer_1_1Lib.htm#ac3ab8abfd1eae55ee416dc8a0259f154">  219</a></span>&#160;        <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1timer_1_1Timer.htm">ting::timer::Timer</a>;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keyword">class </span>TimerThread : <span class="keyword">public</span> ting::mt::Thread{</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                <span class="keyword">volatile</span> <span class="keywordtype">bool</span> quitFlag = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                std::mutex mutex;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                ting::mt::Semaphore sema;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                <span class="comment">//mutex used to make sure that after Timer::Stop() method is called the</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                <span class="comment">//expired notification callback will not be called</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                std::mutex expiredTimersNotifyMutex;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                <span class="comment">//map requires key uniqueness, but in our case the key is a stop ticks,</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                <span class="comment">//so, use std::multimap to allow similar keys.</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                Timer::T_TimerList timers;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                std::uint64_t ticks = 0;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                <span class="keywordtype">bool</span> incTicks = <span class="keyword">false</span>;<span class="comment">//flag indicates that high word of ticks needs increment</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                <span class="comment">//This function should be called at least once in 16 days (half of std::uint32_t(-1) milliseconds)</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                <span class="comment">//in order to function properly.</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                <span class="comment">//This is achieved by having a repeating timer set to 16 days, which will do nothing but</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                <span class="comment">//calling this function.</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                <span class="keyword">inline</span> std::uint64_t <a class="code" href="namespaceting_1_1timer.htm#abc07f3242532902f2617639685cf8f70">GetTicks</a>();</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                TimerThread(){</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                        ASSERT(!this-&gt;quitFlag)</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                }</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                ~TimerThread()noexcept{</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                        <span class="comment">//at the time of TimerLib destroying there should be no active timers</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                        ASSERT(this-&gt;timers.size() == 0)</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                <span class="keywordtype">void</span> AddTimer_ts(<a class="code" href="classting_1_1timer_1_1Timer.htm">Timer</a>* timer, std::uint32_t timeout);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                <span class="keywordtype">bool</span> RemoveTimer_ts(<a class="code" href="classting_1_1timer_1_1Timer.htm">Timer</a>* timer)noexcept;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                <span class="keyword">inline</span> <span class="keywordtype">void</span> SetQuitFlagAndSignalSemaphore()noexcept{</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                        this-&gt;quitFlag = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                        this-&gt;sema.Signal();</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                }</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                <span class="comment">//override</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                <span class="keywordtype">void</span> Run();</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        } thread;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="keyword">class </span>HalfMaxTicksTimer : <span class="keyword">public</span> <a class="code" href="classting_1_1timer_1_1Timer.htm#aff28d7238c56eb67609bf590a8e2a892">Timer</a>{</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                <span class="comment">//override</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                <span class="keywordtype">void</span> <a class="code" href="classting_1_1timer_1_1Timer.htm#a2cfdc66a49cdbae175d40ac73cc90c72">OnExpired</a>()noexcept{</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                        <span class="keywordflow">try</span>{</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                                this-&gt;<a class="code" href="classting_1_1timer_1_1Timer.htm#a88a6d3e10ca5a91594c90e40f8938b83">Start</a>(Timer::DMaxTicks() / 2);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                        }<span class="keywordflow">catch</span>(...){</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                                ASSERT(<span class="keyword">false</span>)</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                        }</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                }</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        } halfMaxTicksTimer;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00285"></a><span class="lineno"><a class="line" href="classting_1_1timer_1_1Lib.htm#adb6227e1de0c9f6de4b3843950d686b6">  285</a></span>&#160;        <span class="keyword">inline</span> <a class="code" href="classting_1_1timer_1_1Lib.htm#adb6227e1de0c9f6de4b3843950d686b6">Lib</a>(){</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                this-&gt;thread.Start();</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                <span class="comment">//start timer for half of the max ticks</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                this-&gt;halfMaxTicksTimer.OnExpired();</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        }</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div>
<div class="line"><a name="l00297"></a><span class="lineno"><a class="line" href="classting_1_1timer_1_1Lib.htm#a527e94086a8ab9407106e69683d05972">  297</a></span>&#160;        <a class="code" href="classting_1_1timer_1_1Lib.htm#a527e94086a8ab9407106e69683d05972">~Lib</a>()noexcept{</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                <span class="comment">//stop half max ticks timer</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                <span class="keywordflow">while</span>(!this-&gt;halfMaxTicksTimer.Stop()){</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                        ting::mt::Thread::Sleep(10);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                }</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="preprocessor">#ifdef DEBUG</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="preprocessor"></span>                {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                        std::lock_guard&lt;decltype(this-&gt;thread.mutex)&gt; mutexGuard(this-&gt;thread.mutex);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                        ASSERT(this-&gt;thread.timers.size() == 0)</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                }</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;#endif</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                this-&gt;thread.SetQuitFlagAndSignalSemaphore();</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                this-&gt;thread.Join();</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        }</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;};</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div>
<div class="line"><a name="l00315"></a><span class="lineno"><a class="line" href="classting_1_1timer_1_1Timer.htm#a516b83232f040dbe8673c8a062d49fd6">  315</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classting_1_1timer_1_1Timer.htm#a516b83232f040dbe8673c8a062d49fd6">Timer::~Timer</a>()noexcept{</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        ASSERT_INFO(!this-&gt;isRunning, <span class="stringliteral">&quot;trying to destroy running timer. Stop the timer first and make sure its OnExpired() method will not be called, then destroy the timer object.&quot;</span>)</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;}</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div>
<div class="line"><a name="l00321"></a><span class="lineno"><a class="line" href="classting_1_1timer_1_1Timer.htm#a88a6d3e10ca5a91594c90e40f8938b83">  321</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1timer_1_1Timer.htm#a88a6d3e10ca5a91594c90e40f8938b83">Timer::Start</a>(std::uint32_t millisec){</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        ASSERT_INFO(Lib::IsCreated(), <span class="stringliteral">&quot;Timer library is not initialized, you need to create TimerLib singletone object first&quot;</span>)</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        Lib::Inst().thread.AddTimer_ts(<span class="keyword">this</span>, millisec);</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;}</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div>
<div class="line"><a name="l00329"></a><span class="lineno"><a class="line" href="classting_1_1timer_1_1Timer.htm#a6524a204a180e86999421c5882ba0e54">  329</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1timer_1_1Timer.htm#a6524a204a180e86999421c5882ba0e54">Timer::Stop</a>()noexcept{</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        ASSERT(Lib::IsCreated())</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <span class="keywordflow">return</span> Lib::Inst().thread.RemoveTimer_ts(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;}</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="keyword">inline</span> std::uint64_t <a class="code" href="namespaceting_1_1timer.htm#abc07f3242532902f2617639685cf8f70">Lib::TimerThread::GetTicks</a>(){</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        std::uint32_t ticks = <a class="code" href="namespaceting_1_1timer.htm#abc07f3242532902f2617639685cf8f70">ting::timer::GetTicks</a>() % Timer::DMaxTicks();</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="keywordflow">if</span>(this-&gt;incTicks){</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                <span class="keywordflow">if</span>(ticks &lt; Timer::DMaxTicks() / 2){</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                        this-&gt;incTicks = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                        this-&gt;ticks += (std::uint64_t(Timer::DMaxTicks()) + 1); <span class="comment">//update 64 bit ticks counter</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                }</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                <span class="keywordflow">if</span>(ticks &gt; Timer::DMaxTicks() / 2){</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                        this-&gt;incTicks = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                }</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        }</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="keywordflow">return</span> this-&gt;ticks + std::uint64_t(ticks);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;}</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;}<span class="comment">//~namespace</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;}<span class="comment">//~namespace</span></div>
<div class="ttc" id="classting_1_1timer_1_1Lib_htm"><div class="ttname"><a href="classting_1_1timer_1_1Lib.htm">ting::timer::Lib</a></div><div class="ttdoc">Timer library singleton class. </div><div class="ttdef"><b>Definition:</b> timer.hpp:215</div></div>
<div class="ttc" id="classting_1_1timer_1_1Timer_htm_a516b83232f040dbe8673c8a062d49fd6"><div class="ttname"><a href="classting_1_1timer_1_1Timer.htm#a516b83232f040dbe8673c8a062d49fd6">ting::timer::Timer::~Timer</a></div><div class="ttdeci">virtual ~Timer() noexcept</div><div class="ttdef"><b>Definition:</b> timer.hpp:315</div></div>
<div class="ttc" id="namespaceting_1_1timer_htm_abc07f3242532902f2617639685cf8f70"><div class="ttname"><a href="namespaceting_1_1timer.htm#abc07f3242532902f2617639685cf8f70">ting::timer::GetTicks</a></div><div class="ttdeci">std::uint32_t GetTicks()</div><div class="ttdoc">Get constantly increasing millisecond ticks. </div><div class="ttdef"><b>Definition:</b> timer.hpp:89</div></div>
<div class="ttc" id="classting_1_1timer_1_1Lib_htm_a527e94086a8ab9407106e69683d05972"><div class="ttname"><a href="classting_1_1timer_1_1Lib.htm#a527e94086a8ab9407106e69683d05972">ting::timer::Lib::~Lib</a></div><div class="ttdeci">~Lib() noexcept</div><div class="ttdoc">Destructor. </div><div class="ttdef"><b>Definition:</b> timer.hpp:297</div></div>
<div class="ttc" id="classting_1_1timer_1_1Timer_htm_a88a6d3e10ca5a91594c90e40f8938b83"><div class="ttname"><a href="classting_1_1timer_1_1Timer.htm#a88a6d3e10ca5a91594c90e40f8938b83">ting::timer::Timer::Start</a></div><div class="ttdeci">void Start(std::uint32_t millisec)</div><div class="ttdoc">Start timer. </div><div class="ttdef"><b>Definition:</b> timer.hpp:321</div></div>
<div class="ttc" id="classting_1_1timer_1_1Timer_htm"><div class="ttname"><a href="classting_1_1timer_1_1Timer.htm">ting::timer::Timer</a></div><div class="ttdoc">General purpose timer. </div><div class="ttdef"><b>Definition:</b> timer.hpp:130</div></div>
<div class="ttc" id="classting_1_1timer_1_1Timer_htm_a2cfdc66a49cdbae175d40ac73cc90c72"><div class="ttname"><a href="classting_1_1timer_1_1Timer.htm#a2cfdc66a49cdbae175d40ac73cc90c72">ting::timer::Timer::OnExpired</a></div><div class="ttdeci">virtual void OnExpired() noexcept=0</div><div class="ttdoc">Timer expiration handler. </div></div>
<div class="ttc" id="classting_1_1timer_1_1Lib_htm_adb6227e1de0c9f6de4b3843950d686b6"><div class="ttname"><a href="classting_1_1timer_1_1Lib.htm#adb6227e1de0c9f6de4b3843950d686b6">ting::timer::Lib::Lib</a></div><div class="ttdeci">Lib()</div><div class="ttdef"><b>Definition:</b> timer.hpp:285</div></div>
<div class="ttc" id="classting_1_1timer_1_1Timer_htm_a6524a204a180e86999421c5882ba0e54"><div class="ttname"><a href="classting_1_1timer_1_1Timer.htm#a6524a204a180e86999421c5882ba0e54">ting::timer::Timer::Stop</a></div><div class="ttdeci">bool Stop() noexcept</div><div class="ttdoc">Stop the timer. </div><div class="ttdef"><b>Definition:</b> timer.hpp:329</div></div>
<div class="ttc" id="classting_1_1timer_1_1Timer_htm_aff28d7238c56eb67609bf590a8e2a892"><div class="ttname"><a href="classting_1_1timer_1_1Timer.htm#aff28d7238c56eb67609bf590a8e2a892">ting::timer::Timer::Timer</a></div><div class="ttdeci">Timer()</div><div class="ttdoc">Constructor for new Timer instance. </div><div class="ttdef"><b>Definition:</b> timer.hpp:171</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.htm">src</a></li><li class="navelem"><a class="el" href="dir_767c3599c7ee533ab4c743e529abf7a6.htm">aika</a></li><li class="navelem"><a class="el" href="timer_8hpp.htm">timer.hpp</a></li>
    <li class="footer">Generated on Sun Sep 27 2015 23:40:11 for libaika by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.6 </li>
  </ul>
</div>
</body>
</html>
